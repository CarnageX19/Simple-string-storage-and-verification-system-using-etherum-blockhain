{"mappings":"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","sources":["index.js"],"sourcesContent":["// index.js\r\n\r\nconst abi = [\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": false,\r\n          \"internalType\": \"string\",\r\n          \"name\": \"name\",\r\n          \"type\": \"string\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"issuer\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"verified\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"name\": \"CredentialAdded\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"credentials\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"name\",\r\n          \"type\": \"string\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"issuer\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"verified\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\",\r\n      \"constant\": true\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"_name\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"name\": \"addCredential\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"_entity\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"_index\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"verifyCredential\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n          {\r\n              \"internalType\": \"address\",\r\n              \"name\": \"_entity\",\r\n              \"type\": \"address\"\r\n          },\r\n          {\r\n              \"internalType\": \"string\",\r\n              \"name\": \"_name\",\r\n              \"type\": \"string\"\r\n          }\r\n      ],\r\n      \"name\": \"credentialExists\",\r\n      \"outputs\": [\r\n          {\r\n              \"internalType\": \"bool\",\r\n              \"name\": \"\",\r\n              \"type\": \"bool\"\r\n          }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\",\r\n      \"constant\": true\r\n  },\r\n  {\r\n      \"inputs\": [\r\n          {\r\n              \"internalType\": \"address\",\r\n              \"name\": \"_entity\",\r\n              \"type\": \"address\"\r\n          },\r\n          {\r\n              \"internalType\": \"string\",\r\n              \"name\": \"_name\",\r\n              \"type\": \"string\"\r\n          }\r\n      ],\r\n      \"name\": \"getCredentialByName\",\r\n      \"outputs\": [\r\n          {\r\n              \"internalType\": \"string\",\r\n              \"name\": \"name\",\r\n              \"type\": \"string\"\r\n          },\r\n          {\r\n              \"internalType\": \"address\",\r\n              \"name\": \"issuer\",\r\n              \"type\": \"address\"\r\n          },\r\n          {\r\n              \"internalType\": \"bool\",\r\n              \"name\": \"verified\",\r\n              \"type\": \"bool\"\r\n          }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\",\r\n      \"constant\": true\r\n  },\r\n  ];\r\n\r\n\r\n  document.addEventListener(\"DOMContentLoaded\", async () => {\r\n    // Initialize web3\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await\r\n   \r\n  window.ethereum.enable();\r\n    } else\r\n   \r\n  if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      console.error(\"No web3 provider detected. Please install MetaMask or use a web3-enabled browser.\");\r\n      return;\r\n    }\r\n  \r\n    // Get the current Ethereum account\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    const currentAccount = accounts[0];\r\n  \r\n    // Load the smart contract\r\n    const contractAddress = \"0xb8De3cB23806ebA1c776b89A0aDA93857ABc97dE\"; // Use your actual contract address\r\n    const credentialVerificationContract = new window.web3.eth.Contract(abi, contractAddress);\r\n  \r\n    // Display existing credentials\r\n    //displayCredentials();\r\n  \r\n    // Handle the form submission to add a new credential\r\n    document.getElementById(\"addCredentialForm\").addEventListener(\"submit\", async (event) => {\r\n      event.preventDefault();\r\n      const credentialName = document.getElementById(\"credentialName\").value;\r\n  \r\n      // Add the new credential to the smart contract\r\n      await credentialVerificationContract.methods.addCredential(credentialName).send({ from: currentAccount });\r\n  \r\n      // Display updated credentials\r\n      //displayCredentials();\r\n    });\r\n    \r\n    document.getElementById(\"checkCredentialForm\").addEventListener(\"submit\", async (event) => {\r\n      event.preventDefault();\r\n      const credentialNameToCheck = document.getElementById(\"credentialToCheck\").value;\r\n  \r\n      // Check if the specified credential exists and get its details\r\n      try {\r\n          const credentialExists = await credentialVerificationContract.methods.credentialExists(currentAccount, credentialNameToCheck).call();\r\n          if (credentialExists) {\r\n              // Credential exists, display its details\r\n              const credentialDetails = await credentialVerificationContract.methods.getCredentialByName(currentAccount, credentialNameToCheck).call();\r\n              alert(`${credentialDetails[0]} - Verified: ${credentialDetails[2]}`);\r\n          } else {\r\n              // Credential does not exist\r\n              alert(`Credential with name \"${credentialNameToCheck}\" not found.`);\r\n          }\r\n      } catch (error) {\r\n          console.error(\"Error checking credential:\", error);\r\n      }\r\n  });\r\n\r\n\r\n    // Function to display credentials\r\n// Function to display credentials \r\n      async function displayCredentials() {\r\n        const credentialsList = document.getElementById(\"credentialsList\");\r\n        credentialsList.innerHTML = \"\";\r\n\r\n        // Get the number of credentials for the current account\r\n        const credentialCount = 10; // Replace with the actual call to get credential count\r\n\r\n        // Display details of each credential\r\n        for (let i = 0; i < credentialCount; i++) {\r\n            try {\r\n                const credential = await credentialVerificationContract.methods.credentials(currentAccount, i).call();\r\n                credentialsList.innerHTML += `<div>${credential.name} - Verified: ${credential.verified}</div>`;\r\n            } catch (error) {\r\n                console.error(\"Error fetching credential:\", error);\r\n            }\r\n        }\r\n      }\r\n      \r\n  });\r\n"],"names":[],"version":3,"file":"index.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}